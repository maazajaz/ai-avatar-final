/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF(
    "/models/64f1a714fe61576b46f27ca2.glb"
  );

  const { message, onMessagePlayed, chat } = useChat();

  const [lipsync, setLipsync] = useState();
  const [audioContext, setAudioContext] = useState(null);
  const [isAudioInitialized, setIsAudioInitialized] = useState(false);

  // Initialize audio context for mobile compatibility
  const initializeAudio = async () => {
    if (isAudioInitialized) return;
    
    try {
      // Create or resume audio context for mobile
      const ctx = new (window.AudioContext || window.webkitAudioContext)();
      if (ctx.state === 'suspended') {
        await ctx.resume();
      }
      setAudioContext(ctx);
      setIsAudioInitialized(true);
      console.log('Audio initialized for mobile');
    } catch (error) {
      console.error('Failed to initialize audio:', error);
    }
  };

  // Mobile-friendly audio player
  const playAudioMobile = async (audioSrc) => {
    try {
      // Ensure audio is initialized
      await initializeAudio();
      
      console.log('🔊 Mobile Audio Debug:', {
        audioSrc: audioSrc ? audioSrc.substring(0, 50) + '...' : 'null',
        audioInitialized: isAudioInitialized,
        userAgent: navigator.userAgent
      });
      
      const audio = new Audio();
      
      // Mobile-specific audio settings
      audio.preload = 'auto';
      audio.crossOrigin = 'anonymous';
      audio.volume = 1.0; // Ensure volume is at maximum
      audio.muted = false; // Ensure not muted
      
      // Add mobile-specific properties
      if ('playsInline' in audio) {
        audio.playsInline = true;
      }
      
      // iOS specific settings
      if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
        audio.setAttribute('webkit-playsinline', 'true');
        audio.setAttribute('playsinline', 'true');
      }
      
      return new Promise((resolve, reject) => {
        const handleCanPlay = async () => {
          try {
            console.log('🎵 Mobile audio can play, attempting to play...');
            console.log('Audio properties:', {
              duration: audio.duration,
              volume: audio.volume,
              muted: audio.muted,
              readyState: audio.readyState
            });
            
            // Try to play immediately
            const playPromise = audio.play();
            if (playPromise !== undefined) {
              await playPromise;
              console.log('✅ Mobile audio playing successfully!');
            }
            setAudio(audio);
            audio.onended = () => {
              console.log('🔚 Mobile audio ended');
              onMessagePlayed();
            };
            resolve(audio);
          } catch (playError) {
            console.error('❌ Mobile audio play failed:', playError);
            console.log('Play error details:', {
              name: playError.name,
              message: playError.message,
              audioState: audio.readyState,
              audioVolume: audio.volume
            });
            // Fallback for mobile - still set the audio for lipsync fallback
            setAudio(audio);
            setTimeout(onMessagePlayed, 3000);
            resolve(audio);
          }
        };

        const handleError = (error) => {
          console.error('❌ Mobile audio load failed:', error);
          reject(error);
        };

        const handleLoadStart = () => {
          console.log('📥 Mobile audio load started');
        };

        const handleLoadedData = () => {
          console.log('📊 Mobile audio data loaded');
        };

        audio.addEventListener('loadstart', handleLoadStart, { once: true });
        audio.addEventListener('loadeddata', handleLoadedData, { once: true });
        audio.addEventListener('canplaythrough', handleCanPlay, { once: true });
        audio.addEventListener('error', handleError, { once: true });
        
        // Set the source AFTER adding event listeners
        audio.src = audioSrc;
        console.log('🎯 Mobile audio source set, loading...');
        audio.load(); // Explicitly load for mobile
      });
    } catch (error) {
      console.error('💥 Mobile audio setup failed:', error);
      throw error;
    }
  };

  useEffect(() => {
    console.log('Message changed:', message);
    if (!message) {
      setAnimation("Idle");
      return;
    }
    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    console.log('Lipsync data:', message.lipsync ? 'Available' : 'NULL - using fallback');
    
    // Handle audio - check if it's already a data URL or just base64
    let audioSrc;
    if (message.audio && message.audio.startsWith('data:audio/')) {
      // Already a complete data URL
      audioSrc = message.audio;
    } else if (message.audio) {
      // Just base64, need to add the data URL prefix
      audioSrc = "data:audio/mpeg;base64," + message.audio;
    }
    
    if (audioSrc) {
      // Detect mobile device
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      if (isMobile) {
        console.log('📱 Mobile device detected, using mobile audio player');
        
        // Additional mobile audio debugging
        console.log('Mobile audio environment:', {
          userAgent: navigator.userAgent,
          audioInitialized: isAudioInitialized,
          audioContextState: audioContext?.state,
          windowAudioContext: !!(window.AudioContext || window.webkitAudioContext)
        });
        
        playAudioMobile(audioSrc).catch(error => {
          console.error('❌ Mobile audio completely failed:', error);
          // Even if audio fails, ensure lipsync works
          const fallbackAudio = { 
            paused: false, 
            currentTime: 0,
            volume: 1,
            duration: 5 // Assume 5 second message for lipsync timing
          };
          setAudio(fallbackAudio);
          setTimeout(onMessagePlayed, 5000); // 5 second fallback
        });
      } else {
        // Desktop audio handling
        console.log('Desktop device, using standard audio player');
        
        const audio = new Audio(audioSrc);
        audio.play().then(() => {
          console.log('✅ Desktop audio playing successfully');
        }).catch(error => {
          console.error('Desktop audio failed:', error);
        });
        setAudio(audio);
        audio.onended = onMessagePlayed;
      }
    } else {
      // No audio, but still need to call onMessagePlayed after animation
      console.log('No audio available, using fallback timing');
      setTimeout(onMessagePlayed, 3000); // Fallback: auto-advance after 3 seconds
    }
  }, [message]);

  const { animations } = useGLTF("/models/animations.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  useEffect(() => {
    actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {}
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  useFrame(() => {
    !setupMode &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (message && lipsync && audio && audio.currentTime !== undefined) {
      // Use actual lipsync data (local development with working audio)
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
    } else if (message && (!lipsync || !audio || audio.paused !== false)) {
      // Fallback: realistic talking animation for production OR mobile audio issues
      const time = Date.now() * 0.001;
      
      // Create more realistic mouth movements with multiple visemes
      const visemes = ["viseme_AA", "viseme_E", "viseme_I", "viseme_O", "viseme_U"];
      const speeds = [6, 8, 10, 7, 9]; // Different speeds for each viseme
      
      // Use multiple sine waves for more natural movement
      let maxIntensity = 0;
      let dominantViseme = "viseme_AA";
      
      visemes.forEach((viseme, index) => {
        const intensity = (Math.sin(time * speeds[index]) + 1) * 0.3; // 0 to 0.6
        if (intensity > maxIntensity) {
          maxIntensity = intensity;
          dominantViseme = viseme;
        }
      });
      
      // Add some randomness for more natural speech
      const randomFactor = (Math.sin(time * 13) * 0.1) + 0.8; // 0.7 to 0.9
      const finalIntensity = maxIntensity * randomFactor;
      
      appliedMorphTargets.push(dominantViseme);
      lerpMorphTarget(dominantViseme, finalIntensity, 0.15);
      
      // Add subtle jaw movement
      const jawIntensity = (Math.sin(time * 4) + 1) * 0.1; // Slower jaw movement
      lerpMorphTarget("jawOpen", jawIntensity, 0.1);
      
      console.log('Using fallback lipsync animation'); // Debug for mobile
    }

    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.1);
    });
    
    // Reset jaw when not talking
    if (!message || !audio || audio.paused) {
      lerpMorphTarget("jawOpen", 0, 0.1);
    }
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
            nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/64f1a714fe61576b46f27ca2.glb");
useGLTF.preload("/models/animations.glb");
